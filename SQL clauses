SQL clauses are group by,having,order by,where.
1. GROUP BY
SQL GROUP BY statement is used to arrange identical data into groups. The GROUP BY statement is used with the SQL SELECT statement.
The GROUP BY statement follows the WHERE clause in a SELECT statement and precedes the ORDER BY clause.
The GROUP BY statement is used with aggregation function.
Syntax:
SELECT column  
FROM table_name  
WHERE conditions   
GROUP BY column  
ORDER BY column  
Examples:
1)
SELECT COMPANY, COUNT(*)  
FROM PRODUCT_MAST   
GROUP BY COMPANY;  
Output:

Company1   5
Company2   3
Company3   2
  Here in this example, GROUP BY function returns 

2)
SELECT names
FROM SWEETS   
GROUP BY sweet_id;
  

2. HAVING
HAVING clause is used to specify a search condition for a group or an aggregate.
Having is used in a GROUP BY clause. If you are not using GROUP BY clause then you can use HAVING function like a WHERE clause.
Syntax:

SELECT column1, column2   
FROM table_name  
WHERE conditions   
GROUP BY column1, column2   
HAVING conditions  
ORDER BY column1, column2;  

Example:

SELECT COMPANY, COUNT(*)  
FROM PRODUCT_MAST   
GROUP BY COMPANY  
HAVING COUNT(*)>2;  
Output:

Com1   5
 SELECT SWEETS FROM SHOP
 HAVING SWEETS



3. ORDER BY
The ORDER BY clause sorts the result-set in ascending or descending order.
It sorts the records in ascending order by default. DESC keyword is used to sort the records in descending order.
Syntax:

SELECT column1, column2  
FROM table_name  
WHERE condition  
ORDER BY column1, column2... ASC|DESC;  
Where

ASC: It is used to sort the result set in ascending order by expression.

DESC: It sorts the result set in descending order by expression.
Examples:
1.
SELECT * FROM Customers
ORDER BY Country;
2.
SELECT * FROM Customers
ORDER BY Country, CustomerName;
3. 
SELECT * FROM Customers
ORDER BY Country, CustomerName;


4.WHERE clause:
SYNTAX:
   SELECT * FROM table_name WHERE column_name=value;
   
  Examples:-
     1)
     SELECT BookName, Price, Lang From Books WHERE CatID >1;
     
    2) WHERE clause combined with – AND LOGICAL Operator
     The WHERE condition in MySQL when used together with the AND logical operator, is only executed if ALL filter criteria specified are met.
    Let’s now look at a practical example – Suppose we want to get a list of all the movies in category 2 that were released in 2008, we would use the script shown below is achieve that.
    SELECT * FROM `movies` WHERE `category_id` = 2 AND `year_released` = 2020;

   3)
    WHERE clause combined with – OR LOGICAL Operator
    The WHERE clause when used together with the OR operator, is only executed if any or the entire specified filter criteria is met.
    The following script gets all the movies in either category 1 or category 2
    SELECT * FROM `movies` WHERE `category_id` = 1 OR `category_id` = 2;

    4)
   WHERE clause combined with – IN Keyword
   The WHERE in MySQL clause, when used together with the IN keyword only affects the rows whose values matches the list of values provided in the IN keyword. The MySQL IN statement helps to reduce number of OR clauses you may have to use.
   The following MySQL WHERE IN query gives rows where membership_number is either 1 , 2 or 3
   SELECT * FROM `members` WHERE `membership_number` IN (1,2,3);

    5)
   WHERE clause combined with – NOT IN Keyword
   The WHERE clause when used together with the NOT IN keyword DOES NOT affects the rows whose values matches the list of values provided in the NOT IN keyword.
   The following query gives rows where membership_number is NOT 1 , 2 or 3
   SELECT * FROM `members` WHERE `membership_number` NOT IN (1,2,3);

   6)
   WHERE clause combined with – COMPARISON Operators
   The less than (), equal to (=), not equal to () comparison operators can be used with the WHERE Clause

   = Equal To
   The following script gets all the female members from the members table using the equal to comparison operator.
   SELECT * FROM `members` WHERE `gender` = 'Female';

   > Greater than
   SELECT * FROM `payments` WHERE `amount_paid` > 2000;




