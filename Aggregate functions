An aggregate function allows you to perform a calculation on a set of values to return a single scalar value.
We often use aggregate functions with the GROUP BY and HAVING clauses of the SELECT statement.

The following are the most commonly used SQL aggregate functions:

AVG – calculates the average of a set of values.
COUNT – counts rows in a specified table or view.
MIN – gets the minimum value in a set of values.
MAX – gets the maximum value in a set of values.
SUM – calculates the sum of values.
SQL aggregate functions syntax
To call an aggregate function, you use the following syntax:

aggregate_function (DISTINCT | ALL expression)
Let’s examine the syntax above in greater detail:

First, specify an aggregate function that you want to use e.g., MIN, MAX, AVG, SUM or COUNT.
Second, put DISTINCT or ALL modifier followed by an expression inside parentheses. 
If you explicitly use the DISTINCT modifier, the aggregate function ignores duplicate values and only consider the unique values. 
you use the ALL modifier, the aggregate function uses all values for calculation or evaluation.
The  ALL modifier is used by default if you do not specify any modifier explicitly.
SQL aggregate function examples
Let’s take a look some examples of using SQL aggregate functions.

->COUNT function example
To get the number of products in the products table, you use the COUNT function as follows:

SELECT 
    COUNT(*)
FROM
    products;
SQL COUNT function example
The COUNT() function returns the number of the value in a set.

For example, you can use the COUNT() function to get the number of products in the products table as shown in the following query:

SELECT 
    COUNT(*) AS total
FROM 
    product;
The following statement uses the COUNT() function with the GROUP BY clause to get the number of products for each product line:

SELECT 
    productLine, 
    COUNT(*)
FROM
    products
GROUP BY productLine
ORDER BY productLine;

MySQL Aggregate Function - COUNT example


->AVG function example
To calculate the average units in stock of the products, you use the AVG function as follows:
SELECT 
    AVG(unitsinstock)
FROM
    products;
SQL avg units in stock
To calculate units in stock by product category, you use the AVG function with the  GROUP BY clause as follows:
SELECT 
    categoryid, AVG(unitsinstock)
FROM
    products
GROUP BY categoryid;
SQL avg group by

->SUM function example
To calculate the sum of units in stock by product category, you use the SUM function with the  GROUP BY clause as the following query:

SELECT 
    categoryid, SUM(unitsinstock)
FROM
    products
GROUP BY categoryid;
The following example uses the AVG() function to calculate the average buy price for each product line:

SELECT 
    productLine, 
    AVG(buyPrice)
FROM
    products
GROUP BY productLine
ORDER BY productLine;
SQL SUM example
The SUM() function returns the sum of values in a set. The SUM() function ignores NULL. If no matching row found, the SUM() function returns NULL.

To get the total order value of each product, you can use the SUM() function in conjunction with the GROUP BY clause as follows:

SELECT 
    productCode, 
    SUM(priceEach * quantityOrdered) total
FROM
    orderDetails
GROUP BY productCode
ORDER BY total DESC;
MySQL Aggregate Function - SUM example
To see the result in more detail, you can join the orderdetails table to the products table as shown in the following query:

SELECT 
    productCode,
    productName,
    SUM(priceEach * quantityOrdered) total
FROM
    orderDetails
        INNER JOIN
    products USING (productCode)
GROUP BY productCode
ORDER BY total;
Code language: SQL (Structured Query Language) (sql)
Try It Out

MySQL Aggregate Function - SUM with JOIN example


->MIN function example
To get the minimum units in stock of products in the products table, you use the MIN function as follows:

SELECT 
    MIN(unitsinstock)
FROM
    products;
    The MIN() function returns the minimum value in a set of values.

MIN(expression)
Code language: SQL (Structured Query Language) (sql)
For example, the following query uses the MIN() function to find the lowest price from the products table:

SELECT 
    MIN(buyPrice) lowest_price
FROM 
    products;
Code language: SQL (Structured Query Language) (sql)
Try It Out

MySQL Aggregate Function - MIN example
The following example uses the MIN() function with the GROUP BY clause to get the lowest price per product line:

SELECT 
    productLine, 
    MIN(buyPrice)
FROM
    products
GROUP BY productLine
ORDER BY MIN(buyPrice);
Code language: SQL (Structured Query Language) (sql)
Try It Out

MySQL Aggregate Function - MIN with GROUP BY example

->MAX function example
To get the maximum units in stock of products in the products table, you use the MAX function as shown in the following query:

SELECT 
    MAX(unitsinstock)
FROM
    products;
    SQl clauses:
    The MAX() function returns the maximum value in a set.

MAX(expression)
Code language: SQL (Structured Query Language) (sql)
For example, you can use the MAX() function to get the highest buy price from the products table as shown in the following query:

SELECT 
     MAX(buyPrice) highest_price
FROM 
     products;
Code language: SQL (Structured Query Language) (sql)
Try It Out

MySQL Aggregate Function - MAX example
The following statement uses the MAX() function with the GROUP BY clause to get the highest price per product line:

SELECT 
    productLine, MAX(buyPrice)
FROM
    products
GROUP BY productLine
ORDER BY MAX(buyPrice) DESC;
Code language: SQL (Structured Query Language) (sql)
Try It Out

MySQL Aggregate Function - MAX with GROUP BY example
    


